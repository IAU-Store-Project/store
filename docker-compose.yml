version: '3.8'

services:

  db:
    image: postgres:13-alpine
    restart: always
    volumes:
      - db-data:/var/lib/postgresql/data
    env_file:
      - ./backend/src/.env.docker
    networks:
      - live

  redis:
    image: 'redis:alpine'
    hostname: redis
    networks:
      - live

  app:
    build:
      context: ./backend
      dockerfile: Dockerfile
    hostname: app
    stdin_open: true
    expose:
      - '8000'
    volumes:
      - ./backend/src/.env.docker:/app/.env
    command: bash -c "python manage.py migrate && gunicorn core.wsgi:application -b 0.0.0.0:8000"
    #command: python manage.py runserver 0.0.0.0:8000
    depends_on:
      - redis
      - es
      - db
    networks:
      - live

  frontend:
    image: node:17
    command: sh entrypoint.sh
    working_dir: /app/frontend
    volumes:
      - ./frontend/:/app/frontend
    restart: on-failure
    networks:
      - live

  nginx:
    image: nginx
    hostname: nginx
    ports:
      - '8000:8000'
    volumes:
      - ./devops/nginx:/etc/nginx/conf.d
      - ./backend/src:/app
      - ./frontend/:/app/frontend
    depends_on:
      - app
      - frontend
    networks:
      - live

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: "celery -A core worker -l info"
    volumes:
      - ./backend/src/.env.docker:/app/.env
    depends_on:
      - app
      - redis
      - db
    restart: on-failure
    networks:
      - live

  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - '5555:5555'
    command: "celery -A core flower --address=0.0.0.0" # --broker="${CELERY_BROKER}"
    volumes:
      - ./backend/src/.env.docker:/app/.env
    depends_on:
      - celery
    restart: on-failure
    networks:
      - live

  es:
    image: elasticsearch:8.2.0
    hostname: elasticsearch
    container_name: store-es
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - 9200:9200
      - 9300:9300
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - live
    tty: true

#
#  mailhog:
#    image: "mailhog/mailhog"
#    container_name: store-mailhog
#    restart: always
#    driver: none
#    ports:
#      - 1025:1025
#      - 8025:8025
#    networks:
#      - public
#    tty: true

  meta:
    image: metabase/metabase:latest
    container_name: store-meta
    hostname: meta
    ports:
      - 3005:3000
    env_file:
      - ./backend/src/.env.docker
    networks:
      - live
    links:
      - db
    tty: true
    volumes:
      - ./backend/src/db.sqlite3:/db.sqlite3

volumes:
  db-data:
  esdata:

networks:
  live:
